\ simpleForth runtimesystem - i386 (32 bit) dependent part
\ --------------------------------------------------------

\  - registers:
\      EAX, EDX  general purpose
\      ESI  instruction pointer
\      EBP  return stack pointer
\      ESP  data stack pointer

prelude
;;; This is a simpleForth generated file using simpleForth-i386-backend.
;;; Only modify it, if you know what you are doing.
 
;

\ --------------------------
\ simpleForth primitives for i386 (32 bit)
\ --------------------------

prefix
format ELF 

section '.bss' executable writable

       DD 10000 dup(0)
stck:  DD 16 dup(0)
  
       DD 10000 dup(0)
rstck: DD 16 dup(0)


section '.text' executable writable align 4096

public main 
extrn putchar
extrn getchar
extrn fflush
extrn exit
extrn mprotect
; extrn __error  ; Mac OS
; extrn __errno_location ; Linux
  
macro next  {
       lodsd
       jmp dword [eax]
}

origin:

main:  cld
       mov esp, dword stck
       mov ebp, dword rstck

       ; make section writable
       push ebp
       mov ebp, esp
       sub esp, 16
       and esp, 0xfffffff0
       mov dword [esp+8], 7  ; rwx
       mov eax, memtop
       sub eax, origin
       mov dword [esp+4], eax
       mov dword [esp], origin
       call mprotect
       mov esp, ebp
       pop ebp
       or eax, eax     ; error?   
       jz main0
       push ebp  
       mov ebp, esp
       push eax
       and esp, 0xfffffff0
       ; call __error    ; get error code on Mac OS
       ; mov eax, [eax]
       ; call __errno_location ; get error on Linux
       ; mov eax, [eax]
       mov [esp], eax
       call exit

main0: mov esi, main1
       next

main1: DD _cold
       DD _bye  
  
  
_nest:  lea ebp, [ebp-4]
        mov [ebp], esi
        lea esi, [eax+4]
        next

_dovar: lea eax,[eax+4]
	push eax
        next

_doconst:
        push dword [eax+4]
        next

_dodefer:
	mov eax, [eax+4]
        jmp dword [eax]
	
_O = 0

;

code bye ( -- )
    push ebp  
    mov ebp, esp  
    and esp, 0xfffffff0
    mov eax, 0
    mov [esp], eax
    call exit
;
    
code emit ( c -- )
    pop eax

    push ebp  
    mov  ebp, esp
    push eax 
    and  esp, 0xfffffff0

    mov dword [esp], eax
    call putchar

    mov eax, 0
    mov [esp], eax
    call fflush   ; flush all output streams

    mov esp, ebp  
    pop ebp  
    next
;

code key ( -- c )
        push ebp  
        mov  ebp, esp
        and  esp, 0xfffffff0
        
        call getchar
        mov esp, ebp
        pop ebp
        cmp eax,-1
        jnz key1
        mov eax,4
key1:   push eax
        next
;

code dup ( x -- x x )
        pop eax
        push eax
        push eax
        next
;

code swap ( x y -- y x )
        pop edx
        pop eax
        push edx
        push eax
        next
;

code drop ( x -- )
        pop eax
        next
;

code 0< ( x -- flag )
        pop eax
        or eax, eax
        mov eax, 0
        jns zless1
        dec eax
zless1: push eax
        next
;

code ?exit ( f -- )
        pop eax
        or eax, eax
        jz qexit1
        mov esi, [ebp]
        lea ebp,[ebp+4]
qexit1: next
;

code >r ( x -- ) ( R -- x )
        pop ebx
        lea ebp,[ebp-4]
        mov [ebp], ebx
        next
;

code r> ( R x -- ) ( -- x )
        mov eax,[ebp]
        lea ebp, [ebp+4]
        push eax
        next
;

code - ( x1 x2 -- x3 )
        pop edx
        pop eax
        sub eax, edx
        push eax
        next
;

code unnest ( -- )
        mov esi,[ebp]
        lea ebp,[ebp+4]
        next
;

code exit ( -- )
        mov esi,[ebp]
        lea ebp,[ebp+4]
        next
;


code lit ( -- )
        lodsd
        push eax
        next
;

code branch ( -- )
        lodsd
        mov esi,eax
        next
;

code ?branch ( f -- )
        pop eax
        or eax,eax
        jz _branchX
	lea esi,[esi+4]
        next
;

code @ ( addr -- x )
        pop eax
        mov eax,[eax]
	push eax
        next
;

code c@ ( c-addr -- c )
        pop edx
	xor eax, eax
        mov al,byte [edx]
	push eax
        next
;

code ! ( x addr -- )
        pop edx
        pop eax
        mov dword [edx],eax
        next    
;

code c! ( c c-addr -- )
        pop edx
        pop eax
        mov byte [edx], al
        next
;

code execute ( xt -- )
        pop eax
        jmp dword [eax]
;

code depth ( -- n )
        mov eax, stck
	sub eax, esp
	sar eax,2
        push eax
	next
;

\ pre
\     section '.data' writable executable 
\ ;
