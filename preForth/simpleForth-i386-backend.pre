\ simpleForth i386 backend

\ alter substitutes non-letter characters by upper case letters (to aid assemblers to deal with labels).
: replace ( c1 -- c2 c3 2 | c2 1 )
    >r
    'A' 1 r> ''' case? ?exit >r 2drop
    'B' 1 r> '\' case? ?exit >r 2drop
    'C' 1 r> ':' case? ?exit >r 2drop
    'D' 1 r> '.' case? ?exit >r 2drop
    'E' 1 r> '=' case? ?exit >r 2drop
    'F' 1 r> '[' case? ?exit >r 2drop
    'G' 1 r> '>' case? ?exit >r 2drop
    'H' 1 r> ']' case? ?exit >r 2drop
    'I' 1 r> '1' case? ?exit >r 2drop
    'J' 1 r> '2' case? ?exit >r 2drop
    'K' 1 r> '/' case? ?exit >r 2drop
    'L' 1 r> '<' case? ?exit >r 2drop
    'M' 1 r> '-' case? ?exit >r 2drop
    'N' 1 r> '#' case? ?exit >r 2drop
    'O' 1 r> '0' case? ?exit >r 2drop
    'P' 1 r> '+' case? ?exit >r 2drop
    'Q' 1 r> '?' case? ?exit >r 2drop
    'R' 1 r> '"' case? ?exit >r 2drop
    'S' 1 r> '!' case? ?exit >r 2drop
    'T' 1 r> '*' case? ?exit >r 2drop
    'U' 1 r> '(' case? ?exit >r 2drop
    'V' 1 r> '|' case? ?exit >r 2drop
    'W' 1 r> ',' case? ?exit >r 2drop
    \ also 'X' for machine code
    'Y' 1 r> ')' case? ?exit >r 2drop
    'Z' 1 r> ';' case? ?exit >r 2drop
    'U' 'T' 2 r> '{' case? ?exit >r drop 2drop
    'T' 'Y' 2 r> '}' case? ?exit >r drop 2drop
    r> 1
;

\ alter substitutes all non-letter characters by upper case letters.
: alter ( S1 -- S2 )
    '_' 1 rot ?dup 0= ?exit nip nip
    \ dup 0= ?exit
    swap >r 1- alter  r> swap >r replace r> + ;

\ ------------
\ output words
\ ------------
\ Output is done by emit.
\ We define convenience words of the form ."xxx" to output xxx and >"xxx" to output xxx on a new line indented by a tab.

: ."dd" ( -- )
    'D' emit 'D' emit space ;

: >"dd" ( -- )
    cr tab ."dd" ;

: ."db" ( -- )
    'D' emit 'B' emit space ;

: >"db" ( -- )
    cr tab ."db" ;

: ."dup" ( -- )
    'd' emit 'u' emit 'p' emit ;

: ."nest" ( -- )
    'n' 'e' 's' 't' 4 alter show ;

: ."unnest" ( -- )
    'u' 'n' 'n' 'e' 's' 't' 6 alter show ;

: ."lit" ( -- )
    'l' 'i' 't' 3 alter show ;

\ ------------
\ Compiling words
\ ------------

: escaped ( S1 -- S2 )
    dup 0= ?exit
    swap >r 1- escaped  r> swap 1+ over '"' - ?exit  '"' swap 1+ ; 
    
\ ,string compiles the topmost string as a sequence of numeric DB values.
: ,string ( S -- )
    >"db"  '"' emit  escaped show  '"' emit ;
    \ ?dup 0= ?exit
    \ dup roll >"db" u.  \ 1st char
    \ 1- ,string ;

\ reproduce a verbatim line
: ,line ( S -- )
    show ;

\ compile a reference to an invoked word 
: ,word ( S -- )
   ."dd" alter show ;

\ compile a reference to an invoked word on a new line
: ,>word ( S -- )
    >"dd" alter show ;

\ compile reference to nest primitive
: ,nest ( -- )
    ."dd" ."nest" ;


\ compile reference to unnest primitive
: ,unnest ( -- )
    >"dd" ."unnest"
    cr ;

\ reserve space 
: ,allot ( u -- )
    >"db" u. space ."dup" '(' emit '0' emit ')' emit ;

\ compile byte
: ,byte ( u -- )
   >"db" space u. ;

\ compile signed number
: ,n ( n -- )
    >"dd" . ; 

\ compile unsigned number
: ,u ( u -- )
    >"dd" u. ;

\ compile literal
: ,_lit ( S -- )
    >"dd" ."lit"  ,>word ;

\ compile literal
: ,lit ( x -- )
    >"dd" ."lit"  ,n ;

\ output string as comment
: ,comment ( S -- )
    cr tab ';' emit  space show ;

: ,label ( L -- )
    cr show ':' emit tab ;

\ create a new symbolic label
: label ( S -- )
    alter ,label ;

\ body calculates the name of the body from a token
: body ( S1 -- S2 )
   'X' swap 1+ ;

\ ,codefield compiles the code field of primitive
: ,codefield ( S -- )
   body _dup ,word label ;

: ,code ( S -- )
    _dup label
    ,codefield ;

: ,end-code ( -- )
  cr ;
 
\ -----------------------------------
\ tail call optimization    tail word ;  ->  [ ' word >body ] literal >r ;

: bodylabel ( S --  )
   body label ;

\ ,tail compiles a tail call
: ,tail  ( S -- )
   body ,_lit
   '>' 'r' 2 ,>word ;

\ Handle conditionals

\ initialize local labels
: (label ( S1 -- S1 S2 0 ) 
    alter '_' swap 1+  '_' swap 1+  0 ;

\ deinitialize local labels
: label) ( S m -- )
    drop _drop ;

: +label ( L1 i -- L1 L2 i+1 )
    >r _dup   nip r> dup >r '0' + swap r> 1+ ;

: ."branch" ( -- )
    'b' 'r' 'a' 'n' 'c' 'h' 6 alter show ;

: ."?branch" ( -- )
    '?' 'b' 'r' 'a' 'n' 'c' 'h' 7 alter show ;

: ,branch ( L -- )
    >"dd" ."branch"   >"dd" show ;

: ,?branch ( L -- )
    >"dd" ."?branch"  >"dd" show ;

\ codefields

: ."dovar" ( -- )
    'd' 'o' 'v' 'a' 'r' 5 alter show ;

: ."doconst" ( -- )
    'd' 'o' 'c' 'o' 'n' 's' 't' 7 alter show ;

: ,dovar ( -- )
    ."dd" ."dovar" ;

: ,doconst ( -- )
    ."dd" ."doconst" ;


\ prologue and epilogue

: ,opening  ( -- )
;

: ."done" ( -- )
    ';' emit space 'd' emit 'o' emit 'n' emit 'e' emit ;

: ."last:" ( -- )
    ';' emit space 'l' emit 'a' emit 's' emit 't' emit ':' emit space ;

: ,ending ( S -- )
    'l' 'a' 's' 't' 4  0 header cr tab _dup label ,dovar bodylabel _dup ."dd" alter show  
    100000 ,allot 
    'm' 'e' 'm' 't' 'o' 'p' 6 ,label  0 ,u
    cr ."last:" alter show
    cr ."done" cr ;

\ --------------
\ Create headers
\ --------------
\ preForth can optionally also create word headers with a very simple layout.
\ 
\ Word creation is split into parts
\    - header     creates a dictionary header from a string on the stack.
\    - label      creates the assembler label (with symbol substitution)
\    - body       defined later by code (assembly code) or : (threaded code)
\
\ Headers are linked in a single linked list ending in 0.
\ The link-label name of the latest definition is always as a string on top of stack.
\ Creating a new header puts this in the link field of the new definition and
\ replaces the link-label with the current one.


\ link to previous header c. d is new header.
: ,link ( S1 S2 -- S3 S2 )
    '_' swap 1+ _dup label  \  d_:
    _swap  ,word  _dup
    1- nip ;

\ create a new header with given name S2 and flags, S1 is the last link label
: header ( S1 S2 flags -- S3 S2 )
    >r
    ,link        \ link
    r>  ,u       \ flags
    dup ,u       \ len
    _dup ,string \ name
;

