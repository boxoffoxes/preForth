\ seedForth demo program source
\
\ tokenize with
\
\ gforth seedForth-tokinzer.fs seedForthDemo.seedsource
\
\ then pipe into seedForth:
\
\ cat seedForthDemo.seed | ./seedForth
\

PROGRAM seedForthDemo.seed

Definer Variable create 0 , ;

\ Missing primitives
: over ( x1 x2 -- x1 x2 x1 )  >r dup r> swap ;
: /string ( x1 x2 x3 -- x4 x5 )   swap over - >r + r> ;
: 2drop ( x1 x2 -- )  drop drop ;

\ output utilities
: cr    ( -- ) 10 emit ;
: type ( c-addr u -- )
    BEGIN dup WHILE  over c@ emit  1  /string  REPEAT  2drop ;

\ Tester 
: empty-stack ( i*x -- )
    BEGIN depth 0< WHILE  0    REPEAT
    BEGIN depth    WHILE  drop REPEAT ;

Variable actual-depth  ( actual-results )  20 cells allot

: nth-result ( n -- addr )
   cells actual-depth + ;

: error ( i*x c-addr u -- )
   cr  type empty-stack ;

: t{ ( i*x -- )
   '.'  emit empty-stack ;

: -> ( -- )
   depth actual-depth !
   BEGIN depth WHILE  depth nth-result !  REPEAT ;

: }t ( i*x -- )
   depth actual-depth @ - IF  s" wrong number of results" error  unnest THEN
   BEGIN depth WHILE  depth nth-result @ - IF  s" incorrect result" error  unnest THEN  REPEAT ;

\ Test basics
t{ 10 '*' + ->  52 }t
t{ 0 0< -> 0 }t
t{ 1 0< -> 0 }t
t{ 2 0< -> 0 }t
t{ 1 negate 0< -> -1 }t
t{ 2 negate 0< -> -1 }t


\ output utilities
: space ( -- ) 32 emit ;

: spaces ( n -- )
    BEGIN ?dup WHILE space 1 - AGAIN ; \ another loop variation

: .digit ( n -- )  '0' + emit ;


\ test conditionals

: yes? ( f -- )
    IF 'Y'  ELSE 'N'  THEN ;  \ standard Forth conditionals

t{ 1 yes? -> 'Y' }t
t{ 0 yes? -> 'N' }t


\ utility words

: 1+ ( x1 -- x2 )  1 + ;
: 1- ( x1 -- x2 )  1 - ;
: nip ( x1 x2 -- x2 ) swap drop ;
\ : c, ( c -- )  here  1  allot  c! ;
: count ( addr -- c-addr u )  dup 1+ swap c@ ;
: < ( n1 n2 -- f )  - 0< ;
: > ( n1 n2 -- f )  swap < ;
: = ( x1 x2 -- f )  - 0= ;
: 2* ( x1 -- x2 )  dup + ;

t{ here 5 c, count -> here 5 }t

\ hex number output

: .hexdigit ( n -- )  dup 9 > IF lit [ 'A' 10 - , ] ELSE '0' THEN + emit ;

\ if we don't have u2/ but only 2* and 0< we need to implement u2/ with a loop. Candidate for primitive
: u2/ ( x1 -- x2 )
   0 8 cells 1-  BEGIN ?dup WHILE  >r 2*  over 0< IF 1+ THEN  >r 2* r> r> 1- REPEAT nip ;

: odd? ( x1 -- f )  dup u2/ 2* = 0= ;

: 2/mod ( x1 -- x2 r )  \ swapped results
   dup u2/ swap odd? negate ;

: 16/mod ( x -- x r )  \ swapped results
   2/mod >r  2/mod >r  2/mod >r  2/mod  2* r> + 2* r> + 2* r> + ;

: #### ( x -- )
   16/mod >r 16/mod >r 16/mod >r  16/mod >r  16/mod >r  16/mod >r 16/mod >r
      .hexdigit  r> .hexdigit   r> .hexdigit  r> .hexdigit  r> .hexdigit
   r> .hexdigit  r> .hexdigit   r> .hexdigit  space ;

: (.) ( x -- )
   ?dup IF  16/mod >r (.) r> .hexdigit THEN ;

: u. ( x -- )
   ?dup IF (.) ELSE '0' emit THEN space ;

: . ( n -- )  dup 0< IF '-'  emit negate THEN u. ;

: .s ( i*x -- i*x )  
    depth 0= ?exit  >r .s r> dup . ;

\ Defining words
Definer Create ( <name> -- ) create ;

Create dada 17 ,
t{ dada @ -> 17 }t


Definer Value ( x <name> -- )  create , does> @ ;

10 Value ten
t{ ten -> 10 }t


Definer Constant ( x <name> -- )  create , does> @ ;

5  Constant five
t{ five -> 5 }t


\ structured data

Definer Field ( offset size <name> -- offset' ) 
  create over , + does> @ + ;


\ define structure
0 
  1 cells Field >name
  2 cells Field >date
Constant person

Create p1 person allot

t{ p1 0 cells + -> p1 >name }t   \ address calculation
t{ p1 1 cells + -> p1 >date }t   \ address calculation
t{ person -> 3 cells }t          \ size of structure


\ Deferred words

: ' ( --  x )  key ;

: uninitialized ( -- ) cr s" uninitialized execution vector" type ;
' uninitialized Constant 'uninitialized

Definer Defer ( <name> -- ) create 'uninitialized , does> @ execute ;

: >body ( xt -- body )  h@  1 cells + ;

: is ( xt -- )  ' >body ! ;

Defer d1  
' ten is d1
t{ d1 d1 d1 -> ten ten ten }t
' five is d1
t{ d1 d1 d1 -> five five five }t

t{ 3 4 + -> 7 }t

\ catch and throw tests

t{ 10 ' dup catch  -> 10 10 0 }t

: err99 ( x -- )  dup 9 = IF 99 throw THEN 1 + ;

t{ 1 ' err99 catch -> 2 0 }t
t{ 5 9 ' err99 catch nip ->  5 99 }t


\ Test for sp!

: rot ( a b c -- b c a )  >r swap r> swap ;
t{ 10 sp@ 20 30 rot sp! -> 10 }t

\ Test for rp!

: rp!-test  ( -- )  rp@  10 >r  20 >r  30 >r  rp!  ;

t{ 99  rp!-test -> 99  }t

: 2dup ( x1 x2 -- x1 x2 x1 x2 )  over over ;

32 Constant bl

: min ( n1 n2 -- n3 )
     2dup > IF swap THEN drop ;

: max ( n1 n2 -- n3 )
     2dup < IF swap THEN drop ;

t{ 3 4 max -> 4 }t
t{ 3 4 min -> 3 }t
t{ -1 4 max -> 4 }t
t{ -1 4 min -> -1 }t

: r@ ( -- x )  r> r> dup >r swap >r ;

\ Test string Literals

: greeting ( -- )  s" a string literal"  ; 
t{ greeting nip -> 16 }t


\ String comparison

: compare ( c-addr1 u1 c-addr2 u2 -- n )
    rot 
    BEGIN \ ( c-addr1 c-addr2 u1 u2 )
      over 
    WHILE
      dup
    WHILE
      >r >r  over c@ over c@ - ?dup IF 0< dup + 1  + nip nip r> drop r> drop unnest THEN
      1+ swap 1+ swap
      r> 1- r> 1-
    REPEAT
      -1
    ELSE
      dup 0= IF 0  ELSE 1  THEN
    THEN >r 2drop 2drop r> ;

: abc ( -- c-addr u ) s" abc" ;
: def ( -- c-addr u ) s" def" ;

t{ abc abc compare -> 0 }t
t{ def def compare -> 0 }t
t{ abc def compare -> -1 }t
t{ def abc compare ->  1 }t


\ Some general memory allocation words

: alloc ( u -- addr )
    here swap allot ;

: dispose ( addr -- )
    drop ;






Create tib 80 allot
Variable #tib

: accept ( c-addr u1 -- c-addr u2 )
    >r
    0 BEGIN ( c-addr u2 ) ( R: u1 )
        key dup 10 -
    WHILE
        dup  8 = over 127 = or IF  drop 1- 0 max  8 emit bl emit 8 emit ELSE
        ( dup emit ) >r 2dup + r> swap c!  1+ r@ min THEN
    REPEAT
    drop  r> drop ;


: query ( -- )
    tib 80 accept #tib ! drop ;

: upc ( c -- C )
    dup 'a' < 0=  over 'z' > 0= and IF  'a' - 'A' + THEN ;

: uppercase ( c-addr u -- )
   BEGIN ( c-addr u )
      dup
   WHILE ( c-addr u )
      over dup c@ upc swap c!  1 /string
   REPEAT ( c-addr u ) 2drop ;

: hi ( -- ) key drop \ discard END / bye token
   BEGIN
     cr s" > " type query 
     cr .s
     tib #tib @  2dup uppercase type  s"  ok" type
   AGAIN ;

\ -----------------------------------------------

: done ( -- )  cr s" done" type cr ; done
\ cr  'd'  emit 'o'  emit 'n'  emit 'e'  emit cr

\ hi
END