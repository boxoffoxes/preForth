\ preForth runtime system - symbolic dependent part

\ --------------------------
\ define preForth primitives
\ --------------------------
\ These are just pseudo assembler definitions to show the overall setup.
\ Pseudo assember assumptions:
\  - registers:
\      X Y   general purpose
\      IP    instruction pointer
\      W     pointer to body
\ 
\  - stacks:
\      data   stack accessible by push pop
\      return stack accessible by rpush rpop

pre
\ This is a preForth generated file using the preForth-symbolic-backend.
\ Only modify it if you know what you are doing.
;

code emit ( c -- )
   pop X  
   swi 0   -- software interrupt 0 to output character in X
   next
;

code key ( -- c )
   swi 1  -- software interrupt 1 to input a character to X
   push X
   next
;

code dup ( x -- x x )
     pop X
     push X
     push X
     next
;

code swap ( x y -- y x )
     pop X
     pop Y
     push X
     push Y
     next
;

code drop ( x -- )
   pop X
   next
;

code 0< ( x -- flag )
       pop X
       and X,X
       js less1
       mov X,#-1
       jmp less2
less1: xor X,X
less2: push X
       next
;

code ?exit
        pop X
        and X,X
        jz qexit1
        rpop IP
qexit1: next
;

code >r ( x -- ) ( R -- x )
   pop X
   rpush X
   next
;

code r> ( R x -- ) ( -- x )
   rpop X
   push X
   next
;

code - ( x1 x2 -- x3 )
   pop X
   pop Y
   sub X,Y
   push X
   next
;

code unnest ( -- )
    rpop IP
    next
;

code nest ( -- )
    rpush IP
    mov IP, W
    next
;

code lit ( -- )
    mov X,(IP)
    push X
    next
;

\ NEXT might look like this:
\
\ code next ( -- )
\    mov W, (IP+)
\    jmp (W+)
\ ;
