\ preForth runtime system - i386 (32 bit) dependent part
\ --------------------------
\
\  - registers:
\      EAX, EDX  general purpose
\      ESI  instruction pointer
\      EBP  return stack pointer
\      ESP  data stack pointer

prelude
# This is a preForth generated file using preForth-i386-backend.
# Only modify it, if you know what you are doing.
 
;

prefix
#include <sys/syscall.h>

.section .bss

	.space 10000 * 4
stck: .space 16 * 4

	.space 10000 * 4
rstck: .space 16 * 4


.section .text

.macro next
	lodsl
	jmp *(%eax)
.endm

.macro code sym name
\sym:	.int body_\sym
body_\sym:
.endm

.macro word sym name
\sym: .int _nest
body_\sym:
.endm


.globl _start
_start:
	cld
	mov $stck, %esp
	mov $rstck, %ebp
	mov $main1, %esi
	next

main1:
	.int _cold
	.int _bye

_nest:
	lea -4(%ebp), %ebp
	mov %esi, (%ebp)
	lea 4(%eax), %esi
	next
;


code bye ( -- )
	mov $SYS_exit, %eax
	mov $0, %ebx
	int $0x80
;

code emit ( c -- )
	mov $SYS_write, %eax
	mov $1, %ebx   # stdout
	mov %esp, %ecx
	mov $1, %edx
	int $0x80
	pop %eax
	next
;

code key ( -- c )
	mov $SYS_read, %eax
	mov $0, %ebx  # stdin
	push %ebx     # 1 cell buf on stack
	mov %esp, %ecx
	mov $1, %edx
	int $0x80
	cmp $0, %eax  # contains # chars read
	jg 1f
	movl $4, (%esp) # ascii EOT char
1:	next
;

code dup ( x -- x x )
	pop %eax
	push %eax
	push %eax
	next
;

code swap ( x y -- y x )
	pop %edx
	pop %eax
	push %edx
	push %eax
	next
;

code drop ( x -- )
	pop %eax
	next
;

code 0< ( x -- flag )
	pop %eax
	or %eax, %eax
	mov $0, %eax
	jns 1f
	dec %eax
1:	push %eax
	next
;

code ?exit ( f -- )
	pop %eax
	or %eax, %eax
	jz 1f
	mov (%ebp), %esi
	lea 4(%ebp), %ebp
1:	next
;

code >r ( x -- ) ( R -- x )
	pop %eax
	lea -4(%ebp), %ebp
	mov %eax, (%ebp)
	next
;

code r> ( R x -- ) ( -- x )
	mov (%ebp), %eax
	lea 4(%ebp), %ebp
	push %eax
	next
;

code - ( x1 x2 -- x3 )
	pop %edx
	pop %eax
	sub %edx, %eax
	push %eax
	next
;

code unnest ( -- )
	mov (%ebp), %esi
	lea 4(%ebp), %ebp
	next
;

code lit ( -- )
	lodsl
	push %eax
	next
;
